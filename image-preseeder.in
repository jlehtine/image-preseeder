#! /bin/bash

# Image Preseeder, a tool to create preseeded Linux installation images
# Copyright 2013 Johannes Lehtinen
#
# Licensed under the MIT License, see LICENSE.md.

# Name of the script
SCRIPTNAME=image-preseeder

# Directory containing the package data
test -n "$IMAGE_PRESEEDER_PKGDATADIR" \
    || IMAGE_PRESEEDER_PKGDATADIR='@pkgdatadir@'

# Directory containing the documentation
test -n "$IMAGE_PRESEEDER_DOCDIR" \
    || IMAGE_PRESEEDER_DOCDIR='@docdir@'

# Set up error handling
error () {
    echo "ERROR: $SCRIPTNAME: $1" 1>&2
    exit 1
}
set -e
trap 'error "Error in line $LINENO"' ERR

# If we are not running as root then re-execute using fakeroot to allow
# special files such as device nodes to be created
if [ $(id -u) -ne 0 ]; then
    exec fakeroot "$0" "$@"
fi

# Set up cleanup on exit
workdir=''
keepworkdir=false
cleanup () {
    if [ -n "$workdir" ]; then
        if [ "$keepworkdir" = true ]; then
            echo "INFO: $SCRIPTNAME: Kept work directory $workdir" 1>&2
        else
            rm -rf "$workdir"
        fi
    fi
}
trap cleanup EXIT

# Prints usage instructions to standard output
usage () {
    cat <<EOS
Image Preseeder, a tool to create preseeded Linux installation images
Copyright 2013 Johannes Lehtinen

usage: $SCRIPTNAME [OPTION...] IMAGE.iso
       $SCRIPTNAME -h

options:
    -h   display this help text and exit
    -v   be verbose and display informational messages
    -x   trace execution of commands
    -k   keep work directory if execution is interrupted
    -p PRESEED.cfg
         add PRESEED.cfg to the preseeding configuration chain
    -I INCLUDED
         include file or directory INCLUDED to /cdrom/image-preseeder
    -D   omit default preseeding configuration and installation scripts
    -u VMTYPE
         enable non-interactive externally initiated updates of the resulting
         virtual machine of type VMTYPE (only "VirtualBox" supported)
    -o OUTPUT.iso
         output preseeded image to OUTPUT.iso [IMAGE-preseeded.iso]

See $IMAGE_PRESEEDER_DOCDIR/README.md.
EOS
}

# Print information if verbose display selected
#
# Parameters:
#   $1 - informational message to display
info () {
    if [ "$verbose" = true ]; then
        echo "INFO: $SCRIPTNAME: $1"
    fi
}

# Converts path name to absolute pathname
#
# Parameters:
#   $1 - path name
# Outputs:
#   absolute path name
abspath () {
    local pn="$1"
    local abspn="$pn"
    if ! echo "$pn" | grep -q -E '^/'; then
        abspn="$(cd "$(dirname "$pn")" && pwd)/$(basename "$pn")" \
            || error "Failed to convert path name $pn to absolute path name"
    fi
    echo "$abspn"
}

# Extracts ISO image
#
# Parameters:
#   $1 - ISO image to be extracted
#   $2 - target directory
extract_iso_image () {
    local image="$1"
    local target="$2"
    local absimage="$(abspath "$image")"
    pushd "$target" > /dev/null 2>&1
    bsdtar xf "$absimage" \
        || error "Error while extracting ISO image $image"
    popd > /dev/null 2>&1
}

# Detect image type
#
# Parameters
#   $1 - path to extracted image
detect_image_type () {
    local dist=''
    local version=''
    local cdtype='normal'
    local infofile=''
    if [ -e "$1/.disk/info" ]; then
        infofile="$1/.disk/info"
    fi
    if [ -e "$1/.disk/mini-info" ]; then
        infofile="$1/.disk/mini-info"
        cdtype="mini"
    fi
    if [ -n "$infofile" ]; then
        diskinfo="$(< "$infofile")"
        case "$diskinfo" in
            "Debian GNU/Linux "*)
                dist=debian
                ;;
            "Ubuntu "*)
                dist=ubuntu
                ;;
            "Ubuntu-Server "*)
                dist=ubuntu-server
                ;;
        esac
        version="$(echo "$diskinfo" | sed -e 's/^[^0-9]*\([0-9][0-9]*\.[0-9][0-9]*\).*$/\1/' | grep -E '^[0-9]+\.[0-9]+$')"
    fi
    if [ -n "$dist" ] && [ -n "$version" ]; then
        echo "$dist-$version-$cdtype"
    else
        echo "unknown"
    fi
}

# Preseeds initrd.gz with the specified preseed configuration
#
# Parameters:
#   $1 - path to initrd
#   $preseedcfgs - array of preseed configuration chain
preseed_initrd () {
    local initrd="$1"
    local initrdabs="$(abspath "$initrd")"

    # Extract initrd.gz
    info "Extracting $initrd..."
    mkdir "$workdir/initrd"
    pushd "$workdir/initrd" > /dev/null 2>&1
    gzip -dc < "$initrdabs" | cpio -id 2> /dev/null \
        || error "Error extracting $initrd"

    # Insert preseeding configuration to initrd
    info "Inserting preseeding configuration..."
    local -a preseedchain=("${preseedcfgs[@]}")
    if [ -e preseed.cfg ]; then
        mv preseed.cfg original-preseed.cfg
        preseedchain=(original-preseed.cfg "${preseedchain[@]}")
    fi
    if [ "${#preseedchain[*]}" -gt 0 ]; then
        cat > preseed.cfg <<EOS
# Preseed configuration chain
d-i preseed/include string ${preseedchain[@]}
EOS
    fi

    # Repackage initrd.gz
    info "Repackaging $initrd..."
    find . | cpio --create --format=newc 2> /dev/null | gzip -c > "$initrdabs" \
        || error "Error repackaging $initrd"
    popd > /dev/null 2>&1
    rm -rf "$workdir/initrd"

}

# Generates ISO image.
#
# Parameters:
#   $1 - source directory
#   $2 - output image name
#   $3 - path to isolinux.bin within the source directory
#   $4 - path to boot.cat within the source directory
generate_iso_image () {
    local sourcedir="$1"
    local output="$2"
    local isolinuxbin="$3"
    local bootcat="$4"
    local outputtmp="$workdir/$(basename "$output")"
    genisoimage -quiet -o "$outputtmp" -b "$isolinuxbin" -c "$bootcat" -boot-info-table -no-emul-boot -R -input-charset default "$sourcedir" \
        || error "Error generating ISO image $output"
    mv "$outputtmp" "$output" \
        || error "Error writing or replacing $output"
}

# Read arguments
verbose=false
setx=''
declare -a optpreseedcfgs=()
declare -a includes=()
preseeddefaults=true
updatetype=''
output=''
while getopts 'hvxkp:I:Du:o:' opt; do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        v)
            verbose=true
            ;;
        x)
            setx='set -x'
            ;;
        k)
            keepworkdir=true
            ;;
        p)
            if [ ! -r "$OPTARG" ]; then
                error "Preseed configuration $OPTARG is not readable"
            fi
            optpreseedcfgs[${#optpreseedcfgs[*]}]="$OPTARG"
            ;;
        I)
            if [ ! -r "$OPTARG" ]; then
                error "Included file/dir $OPTARG is not readable"
            fi
            includes[${#includes[*]}]="$OPTARG"
            ;;
        D)
            preseeddefaults=false
            ;;
        u)
            updatetype="$OPTARG"
            case "$updatetype" in
                VirtualBox)
                    ;;
                *)
                    error "$updatetype is not supported VMTYPE (VirtualBox)"
                    ;;
            esac
            ;;
        o)
            output="$OPTARG"
            ;;
        ?)
            error "Unrecognized option (try -h for help)"
            ;;
    esac
done

# Is input ISO image specified?
if [ $OPTIND -ne $# ]; then
    error "One ISO input image required (try -h for help)"
fi
input="${!OPTIND}"
if [ ! -r "$input" ]; then
    error "Input ISO image $input is not readable"
fi

# Determine output name if not specified
if [ -z "$output" ]; then
    output="$(echo "$input" | sed -e 's|\(\.[^\./]*$\)|-preseeded\1|')"
    if [ "$input" = "$output" ]; then
        output="$(dirname "$input")/preseeded-$(basename "$input")"
    fi
    info "Writing output to $output"
fi

# Track execution if requested
$setx

# Create work directory for building the image
outputdirabs="$(abspath "$(dirname "$output")")"
workdir="$(mktemp -d "$outputdirabs/$(basename "$output").XXXXXX")" \
    || error "Error creating work directory in $outputdirabs"
info "Using work directory $workdir"

# Extract the input image
info "Extracting input image..."
mkdir "$workdir/iso"
extract_iso_image "$input" "$workdir/iso"

# Detect image type
info "Detecting image type..."
type="$(detect_image_type "$workdir/iso")"
info "Detected type $type"

# Detect default preseeding configuration, if not omitted
declare -a preseedcfgs
if [ "$preseeddefaults" = true ]; then
    defaultpreseedcfg="$IMAGE_PRESEEDER_PKGDATADIR/preseed-$type.cfg"
    if [ ! -r "$defaultpreseedcfg" ]; then
        error "No default preseed configuration found for image type $type"
    fi
    info "Using default preseeding configuration $defaultpreseedcfg"
    preseedcfgs=("$defaultpreseedcfg" "${preseedcfgs[@]}")
fi

# Detect default includes, if any
if [ "$preseeddefaults" = true ]; then
    declare -a defincludes=()
    for f in "$IMAGE_PRESEEDER_PKGDATADIR/include-$type/"*; do
        if [ -e "$f" ]; then
            defincludes[${#defincludes[*]}]="$f"
        fi
    done
    includes=("${defincludes[@]}" "${includes[@]}")
fi

# Process initrd.gz to include preseeding configuration
info "Preseeding initrd..."
foundinitrd=false
preseedcfgabs="$(abspath "$preseedcfg")"
pushd "$workdir/iso" > /dev/null 2>&1
for initrd in initrd.gz install/initrd.gz install.*/initrd.gz; do
    if [ -e "$initrd" ]; then
        preseed_initrd "$initrd" "$preseedcfgabs"
        foundinitrd=true
    fi
done
if [ "$foundinitrd" = false ]; then
    error "Did not find initrd.gz in ISO image"
fi

# Locate isolinux
info "Locating isolinux..."
isolinuxcfg=''
for ilg in isolinux.cfg isolinux/isolinux.cfg; do
    if [ -e "$ilg" ]; then
        isolinuxcfg="$ilg"
        info "Found $isolinuxcfg"
        break
    fi
done
isolinuxdir="$(dirname "$isolinuxcfg")"
isolinuxprefix="$isolinuxdir/"
test ! "$isolinuxprefix" = ./ \
    || isolinuxprefix=''
isolinuxbin="${isolinuxprefix}isolinux.bin"
test -e "$isolinuxbin" \
    || error "Did not find isolinux.bin where expected"
bootcat="${isolinuxprefix}boot.cat"
test -e "$bootcat" \
    || error "Did not find boot.cat where expected"

# Add timeout to installation prompt
info "Adding one second timeout to $isolinuxcfg..."
sed -e 's/timeout [0-9][0-9]*/timeout 1/' < "$isolinuxcfg" > "$isolinuxcfg.new"
mv "$isolinuxcfg.new" "$isolinuxcfg"
popd > /dev/null 2>&1

# Copy installation script, if any

# Repackage ISO image
info "Repackaging ISO image into $output..."
generate_iso_image "$workdir/iso" "$output" "$isolinuxbin" "$bootcat"

# Remove work directory
info "Removing work directory..."
rm -rf "$workdir"
workdir=''

# vim:si:sw=4:sta:et
